#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
const ll mn=1e6+10;
using i64 = int64_t;
const ll inf = 1e18;
struct Tag
{
    // 定义要下放什么标记
    Tag(ll =0):  {} // 初始化
    void apply(Tag t)
    {
        // 怎么用父结点的标记更新儿子的标记
    }
};
struct Info
{
    // 初始化info存储的信息
    void apply(Tag t, ll len)
    {
        // 怎么用父结点的标记更新儿子存储的信息
        // 这里 jls 原本没有区间长度 len 这个形参，但我觉得可能常用就自己加上了
        
    }
};
Info operator+(Info a, Info b)
{
    Info c;
    //    if((a.r^b.l)==1&&a.pre==a.len)
//    {
//        c.pre=a.len+b.pre;
//    }
//    else c.pre=a.pre;
//    if((a.r^b.l)==1&&b.suf==b.len)
//    {
//        c.suf=a.suf+b.len;
//    }
//    else c.suf=b.suf;
//    c.len=a.len+b.len;
////    cout<<c.l<<" "<<c.r<<'\n';
//    c.l=a.l;
//    c.r=b.r;
//    // a 和 b 一通操作弄出 c
//    if((a.r^b.l)==1)
//    {
//        c.sum=max(max(a.sum,b.sum),a.suf+b.pre);
//    }
//    else c.sum=max(a.sum,b.sum);
    return c;
}
template<class Info, class Tag>
struct LSGT
{
#define l(p) (p << 1)
#define r(p) (p << 1 | 1)
    ll n;
    std::vector<Info> info;
    std::vector<Tag> tag;
    LSGT() {}
    LSGT(ll _n, Info _v = Info())
    {
        init(_n, _v);
    }
    template<class T>
    LSGT(std::vector<T> _init)
    {
        init(_init);
    }
    void init(ll _n, Info _v = Info())
    {
        init(std::vector<Info>(_n, _v));
    }
    template<class T>
    void init(std::vector<T> _init)
    {
        n = _init.size();
        info.assign(4 << std::__lg(n), Info());
        tag.assign(4 << std::__lg(n), Tag());
        auto build = [&](auto self, ll p, ll l, ll r)
        {
            if (r - l == 1)
            {
                info[p] = _init[l];
                return;
            }
            ll m = l + r >> 1;
            self(self, l(p), l, m);
            self(self, r(p), m, r);
            pull(p);
        };
        build(build, 1, 0, n);
    }
    void pull(ll p)
    {
        info[p] = info[l(p)] + info[r(p)];
    }
    void apply(ll p, const Tag &v, ll len)
    {
        info[p].apply(v, len);
        tag[p].apply(v);
    }
    void push(ll p, ll len)
    {
        apply(l(p), tag[p], len / 2);
        apply(r(p), tag[p], len - len / 2);
        tag[p] = Tag();
    }
    void modify(ll p, ll l, ll r, ll x, const Info &v)
    {
        if (r - l == 1)
        {
    //        ll k=info[p].l;
            info[p] = v;
//            info[p].r=info[p].l= (k^v.l);
            return;
        }
        int m = l + r >> 1;
        if (x < m)
        {
            modify(l(p), l, m, x, v);
        }
        else
        {
            modify(r(p), m, r, x, v);
        }
        pull(p);
    }
    void modify(ll p, const Info &v)
    {
        modify(1, 0, n, p, v);
    }
    Info query(ll p, ll l, ll r, ll x, ll y)
    {
        if (l >= y or r <= x)
        {
            return Info();
        }
        if (l >= x and r <= y)
        {
            return info[p];
        }
        ll m = l + r >> 1;
        push(p, r - l);
        return query(l(p), l, m, x, y) + query(r(p), m, r, x, y);
    }
    Info query(ll l, ll r)
    {
        return query(1, 0, n, l, r);
    }
    void Apply(ll p, ll l, ll r, ll x, ll y, const Tag &v)
    {
        if (l >= y or r <= x)
        {
            return;
        }
        if (l >= x and r <= y)
        {
            //            push(p,r-l);
            apply(p, v, r - l);
            return;
        }
        ll m = l + r >> 1;
        push(p, r - l);
        Apply(l(p), l, m, x, y, v);
        Apply(r(p), m, r, x, y, v);
        pull(p);
    }
    void Apply(ll l, ll r, const Tag &v)
    {
        return Apply(1, 0, n, l, r, v);
    }
};



void solve()
{
    ll n;
    cin>>n;
    vector<Info>a(n);
    for(ll i=0;i<n;i++) cin>>a[i].sum;
    LSGT<Info,Tag>seg(a);
      
//        for(ll j=0; j<n; j++) cout<<seg.query(j,j+1).l<<" "<<seg.query(j,j+1).r<<" ";
//        cout<<'\n';
//        for(ll i=0;i<n;i++) cout<<seg.query(i,i+1).l<<" ";
//        cout<<'\n';
    
}
signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    ll tt;
    //  cin>>tt;
    tt=1;
    while(tt--)solve();
}


